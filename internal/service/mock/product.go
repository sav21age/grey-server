// Code generated by MockGen. DO NOT EDIT.
// Source: product.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	domain "grey/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductInterface is a mock of ProductInterface interface.
type MockProductInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductInterfaceMockRecorder
}

// MockProductInterfaceMockRecorder is the mock recorder for MockProductInterface.
type MockProductInterfaceMockRecorder struct {
	mock *MockProductInterface
}

// NewMockProductInterface creates a new mock instance.
func NewMockProductInterface(ctrl *gomock.Controller) *MockProductInterface {
	mock := &MockProductInterface{ctrl: ctrl}
	mock.recorder = &MockProductInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductInterface) EXPECT() *MockProductInterfaceMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductInterface) CreateProduct(ctx context.Context, input domain.ProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductInterfaceMockRecorder) CreateProduct(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductInterface)(nil).CreateProduct), ctx, input)
}

// GetProduct mocks base method.
func (m *MockProductInterface) GetProduct(ctx context.Context, productId int) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, productId)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductInterfaceMockRecorder) GetProduct(ctx, productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductInterface)(nil).GetProduct), ctx, productId)
}

// ListProduct mocks base method.
func (m *MockProductInterface) ListProduct(ctx context.Context) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProduct", ctx)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProduct indicates an expected call of ListProduct.
func (mr *MockProductInterfaceMockRecorder) ListProduct(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProduct", reflect.TypeOf((*MockProductInterface)(nil).ListProduct), ctx)
}

// UpdatePrice mocks base method.
func (m *MockProductInterface) UpdatePrice(ctx context.Context, productId int, input domain.ProductPriceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrice", ctx, productId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePrice indicates an expected call of UpdatePrice.
func (mr *MockProductInterfaceMockRecorder) UpdatePrice(ctx, productId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrice", reflect.TypeOf((*MockProductInterface)(nil).UpdatePrice), ctx, productId, input)
}
